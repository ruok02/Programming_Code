git bash 사용 명령어

$ cd "C:\Users\Min\Desktop\Programming_Code" <- desktop
$ cd (노트북 위치 저장하기)

-> 디렉토리 위치 가기 (main)

              <main 가능>
동기화 과정: 1. git add . -> 2. git commit -m " (작업 내용 설명) " -> 3. git push origin main

변경 사항 추가 (Add): 작업한 내용을 Git에 알립니다.

Bash

git add .

커밋 (Commit): 변경 사항을 로컬 리포지토리에 기록합니다.

Bash

git commit -m "작업 내용에 대한 설명"
푸시 (Push): 로컬 커밋을 GitHub에 업로드합니다.

Bash

git push origin main
풀 (Pull): 다른 컴퓨터에서 작업한 내용을 가져옵니다.


Bash

git pull origin main
노트북과 데스크탑 간 작업 흐름:

데스크탑 작업 후 푸시:

예시 상황)
1. 데스크탑에서 코드를 작성하거나 수정합니다.
하기 전에 git pull origin main 사용하여 ESC 누른뒤에 :wq! 사용(linux에서 배운 vi 편집기 강제 저장 종료인데 정확한 방법인지는 모름)
(이 작업을 하기전에 main 파일에 있어야함 위의 디렉토리 main 위치로 가야함)
git add . : 변경된 파일들을 스테이징합니다.
git commit -m "작업 내용 설명" : 변경 사항을 로컬 리포지토리에 기록합니다.
git push origin main : 로컬 커밋을 원격 GitHub 리포지토리로 업로드합니다.

2. 노트북에서 작업 전 풀:
노트북에서 작업을 시작하기 전에 해당 리포지토리 폴더로 이동합니다.
git pull origin main : 원격 GitHub 리포지토리의 최신 변경 사항을 가져와서 로컬 리포지토리에 병합합니다. 이 과정에서 노트북의 로컬 파일들이 데스크탑에서 작업한 최신 코드로 업데이트됩니다.

3.노트북에서 작업 후 푸시:
노트북에서 코드를 작성하거나 수정합니다.
git add . : 변경된 파일들을 스테이징합니다.
git commit -m "노트북에서 작업 내용 설명" : 변경 사항을 로컬 리포지토리에 기록합니다.
git push origin main : 노트북의 로컬 커밋을 원격 GitHub 리포지토리로 업로드합니다.

반복: 이 과정을 데스크탑과 노트북을 번갈아 가며 반복하면 됩니다.



